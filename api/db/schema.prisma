datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

enum MemberLevel {
  Silver
  Gold
  Platum
}

enum ProductCondition {
  fair
  good
  excellent
}

enum PriceCategory {
  normal
  promotion
  bulk
  discount
  volume
}

enum CampaignType {
  PingTuan
  JieLong
  BaoMing
  QianDao
  WenJuan
  FaWen
  ZhaoBiao
  chuoJiang
  TongZhi
}

model User {
  id                  Int                    @id @default(autoincrement())
  email               String                 @unique
  hashedPassword      String                 @default("")
  salt                String                 @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  favoriteMetrics     FavoriteMetricOnUser[]
}

model FavoriteMetric {
  id    Int                    @id @default(autoincrement())
  name  String                 @unique
  users FavoriteMetricOnUser[]
}

model FavoriteMetricOnUser {
  id               Int            @id @default(autoincrement())
  favoriteMetricId Int
  favoriteMetric   FavoriteMetric @relation(fields: [favoriteMetricId], references: [id])
  userId           Int
  user             User           @relation(fields: [userId], references: [id])

  @@unique([userId, favoriteMetricId])
}

//Member profile
model Member {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  email             String?            @unique
  openId            String             @unique
  name              String?
  rewardPoints      Int                @default(0)
  referedById       Int?
  referedBy         Member?            @relation("ReferedMember", fields: [referedById], references: [id])
  referals          Member[]           @relation("ReferedMember")
  // lastEntityId      Int?
  // lastEntity        Member?            @relation("lastEntity")
  level             MemberLevel        @default(Silver)
  rewardHistory     RewardHistory[]
  entities          MemberOnEntity[]
  assignedMember    MemberOnEntity[]   @relation("assignedMember")
  profile           Profile?
  pingTuanResponses PingTuanResponse[]
  entitiesCreated   Entity[]
  campaigns         Campaign[]

  followedBy Follow[] @relation("following")
  following  Follow[] @relation("follower")
}

model Follow {
  id          Int    @id @default(autoincrement())
  follower    Member @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   Member @relation("following", fields: [followingId], references: [id])
  followingId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  note      String

  @@unique([followerId, followingId])
}

model Profile {
  id       Int    @id @default(autoincrement())
  member   Member @relation(fields: [memberId], references: [id])
  memberId Int    @unique // relation scalar field (used in the `@relation` attribute above)
  //to have more fields
}

//Reward
model RewardHistory {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  source       String
  rewardPoints Int
  memberId     Int
  member       Member   @relation(fields: [memberId], references: [id])
}

//community Entity
model Entity {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
  name        String           @unique
  description String
  address     String
  phone       String
  isVerified  Boolean
  logoPath    String
  location    String
  createdBy   Member           @relation(fields: [createdById], references: [id])
  createdById Int
  members     MemberOnEntity[]
  products    Product[]
  campaigns   Campaign[]
}

model MemberOnEntity {
  id             Int       @id @default(autoincrement())
  member         Member    @relation(fields: [memberId], references: [id])
  memberId       Int // relation scalar field (used in the `@relation` attribute above)
  entity         Entity?   @relation(fields: [entityId], references: [id])
  entityId       Int // relation scalar field (used in the `@relation` attribute above)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  note           String
  isAdmin        Boolean
  isOwner        Boolean
  isTracked      Boolean
  isFavorite     Boolean
  isContact      Boolean
  assignedMember Member    @relation("assignedMember", fields: [assignedById], references: [id])
  assignedById   Int

  @@unique([memberId, entityId])
}

//Product
model Category {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  name        String
  description String
  imageIcon   String

  subCategory      Category[] @relation("category")
  parentCategory   Category?  @relation("category", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?

  products Product[]
}

model Product {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  name            String
  spec            String
  condition       ProductCondition? @default(excellent)
  description     String
  logoPath        String
  entity          Entity            @relation(fields: [entityId], references: [id])
  entityId        Int
  categories      Category[]
  prices          Price[]
  productImages   ProductImage[]
  pingTuanDetails PingTuanDetail[]
}

model Price {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  price         Decimal
  validFrom     DateTime
  validTo       DateTime
  priceCategory PriceCategory @default(normal)
  product       Product       @relation(fields: [productId], references: [id])
  productId     Int
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  name        String
  description String
  imagePath   String
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
}

//campaign

model CampaignMedia {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  name        String
  description String
  imagePath   String
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  campaignId  Int
}

model Campaign {
  id                  Int              @id @default(autoincrement())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime?        @updatedAt
  startedAt           DateTime
  endedAt             DateTime
  campaignType        CampaignType     @default(PingTuan)
  visibleToMemberOnly Boolean
  name                String
  description         String
  rule                String
  imageIcon           String
  ratings             Int
  trendings           Int
  views               Int
  recommends          Int
  shareds             Int
  media               CampaignMedia[]
  pingTuanDetails     PingTuanDetail[]
  member              Member           @relation(fields: [createdById], references: [id])
  createdById         Int
  entity              Entity?          @relation(fields: [entityId], references: [id])
  entityId            Int?
}

model PingTuanDetail {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  quantity         Int
  price            Decimal
  product          Product            @relation(fields: [productId], references: [id])
  productId        Int
  campaign         Campaign           @relation(fields: [campaignId], references: [id])
  campaignId       Int
  pingTuanResponse PingTuanResponse[]
}

model PingTuanResponse {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  quantity         Int
  member           Member         @relation(fields: [memberId], references: [id])
  memberId         Int
  pingTuanDetail   PingTuanDetail @relation(fields: [pingTuanDetailId], references: [id])
  pingTuanDetailId Int
}

model Post {
  id    Int           @id @default(autoincrement())
  title String
  tags  TagsOnPosts[]
}

model Tag {
  id    Int           @id @default(autoincrement())
  name  String        @unique
  posts TagsOnPosts[]
}

model TagsOnPosts {
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())

  @@id([postId, tagId])
}
