datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

enum MemberLevel {
  Silver
  Gold
  Platum
}

enum ProductCondition {
  fair
  good
  excellent
}

// enum PriceCategory {
//   normal
//   promotional
//   bulk
//   clearance
//   closeout
// }

enum CategoryClassifier {
  business
  pricing
  product
}

enum DigitalAssetType {
  image
  video
}

// enum CampaignType {
//   PingTuan
//   JieLong
//   BaoMing
//   QianDao
//   WenJuan
//   FaWen
//   ZhaoBiao
//   chuoJiang
//   TongZhi
// }

// model User {
//   id                  Int                    @id @default(autoincrement())
//   email               String                 @unique
//   hashedPassword      String                 @default("")
//   salt                String                 @default("")
//   resetToken          String?
//   resetTokenExpiresAt DateTime?
//   favoriteMetrics     FavoriteMetricOnUser[]
// }

// model FavoriteMetric {
//   id    Int                    @id @default(autoincrement())
//   name  String                 @unique
//   users FavoriteMetricOnUser[]
// }

// model FavoriteMetricOnUser {
//   id               Int            @id @default(autoincrement())
//   favoriteMetricId Int
//   favoriteMetric   FavoriteMetric @relation(fields: [favoriteMetricId], references: [id])
//   userId           Int
//   user             User           @relation(fields: [userId], references: [id])

//   @@unique([userId, favoriteMetricId])
// }

//Member profile
model Member {
  id           Int         @id @default(autoincrement())
  displayId    String      @unique @db.VarChar(100)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  email        String?     @unique @db.VarChar(50)
  openId       String      @unique @db.VarChar(30)
  name         String?     @db.VarChar(50)
  rewardPoints Int         @default(0)
  level        MemberLevel @default(Silver)

  profile Profile?

  rewardHistory RewardHistory[]

  campaigns Campaign[]

  referedByMemberId Int?
  referedByMember   Member?  @relation("ReferedMember", fields: [referedByMemberId], references: [id])
  referredMembers   Member[] @relation("ReferedMember")
  followedMembers   Follow[] @relation("follower")
  followingMembers  Follow[] @relation("following")

  lastEntityId      Int?
  lastEntityVisited Entity?  @relation("lastEntity", fields: [lastEntityId], references: [id])
  createdEntities   Entity[] @relation("createdBy")

  entities                MemberOnEntity[]
  entitiesInvitedByMember MemberOnEntity[] @relation("invitedByMember")
}

model Follow {
  id          Int    @id @default(autoincrement())
  follower    Member @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   Member @relation("following", fields: [followingId], references: [id])
  followingId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  note      String?   @db.VarChar(100)

  @@unique([followerId, followingId])
}

model Profile {
  id       Int    @id @default(autoincrement())
  member   Member @relation(fields: [memberId], references: [id])
  memberId Int    @unique // relation scalar field (used in the `@relation` attribute above)
  //to have more fields
}

//Reward
model RewardHistory {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  source       String   @db.VarChar(50)
  rewardPoints Int
  memberId     Int
  member       Member   @relation(fields: [memberId], references: [id])
}

//community Entity
model Entity {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  name        String    @unique @db.VarChar(100)
  description String    @db.VarChar(250)
  address     String    @db.VarChar(100)
  phone       String    @db.VarChar(12)
  isVerified  Boolean
  logoPath    String    @db.VarChar(100)
  location    String    @db.VarChar(100)

  products Product[]

  campaigns Campaign[]

  createdByMember      Member             @relation("createdBy", fields: [createdByMemberId], references: [id])
  createdByMemberId    Int
  members              MemberOnEntity[]
  lastVisitedByMembers Member[]           @relation("lastEntity")
  categories           CategoryOnEntity[]
}

model MemberOnEntity {
  // id       Int     @id @default(autoincrement())
  member   Member @relation(fields: [memberId], references: [id])
  memberId Int // relation scalar field (used in the `@relation` attribute above)
  entity   Entity @relation(fields: [entityId], references: [id])
  entityId Int // relation scalar field (used in the `@relation` attribute above)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  note       String?   @db.VarChar(100)
  isAdmin    Boolean   @default(false)
  isOwner    Boolean   @default(false)
  isTracked  Boolean   @default(false)
  isFavorite Boolean   @default(false)
  isContact  Boolean   @default(false)

  invitedByMember   Member? @relation("invitedByMember", fields: [invitedByMemberId], references: [id])
  invitedByMemberId Int?

  @@id([memberId, entityId])
}

//Product
model Category {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  name        String    @db.VarChar(50)
  description String    @db.VarChar(100)
  imageIcon   String?   @db.VarChar(100)

  subCategory      Category[] @relation("category")
  parentCategory   Category?  @relation("category", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?

  classifier CategoryClassifier @default(product)

  products CategoryOnProduct[]
  prices   Price[]
  entities CategoryOnEntity[]

  @@unique([name, classifier])
}

model CategoryOnEntity {
  id         Int      @id @default(autoincrement())
  entity     Entity   @relation(fields: [entityId], references: [id])
  entityId   Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  isPrimary  Boolean  @default(false)
}

model Product {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
  name        String            @db.VarChar(50)
  spec        String            @db.VarChar(100)
  condition   ProductCondition? @default(excellent)
  description String            @db.VarChar(200)
  logoPath    String            @db.VarChar(100)

  entity               Entity                @relation(fields: [entityId], references: [id])
  entityId             Int
  categories           CategoryOnProduct[]
  prices               Price[]
  productDigitalAssets ProductDigitalAsset[]
}

model CategoryOnProduct {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  isPrimary  Boolean  @default(false)
}

model Price {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  price      Decimal
  validFrom  DateTime
  validTo    DateTime
  //promotional, normal..etc
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  isPrimary  Boolean   @default(false)
}

model ProductDigitalAsset {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
  name        String           @db.VarChar(50)
  description String           @db.VarChar(200)
  path        String           @db.VarChar(100)
  type        DigitalAssetType @default(image)
  isPrimary   Boolean          @default(false)

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

//campaign

model CampaignAsset {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
  name        String           @db.VarChar(50)
  description String           @db.VarChar(200)
  path        String           @db.VarChar(100)
  type        DigitalAssetType @default(image)
  isPrimary   Boolean          @default(false)

  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int
}

model Campaign {
  id                  Int             @id @default(autoincrement())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime?       @updatedAt
  startedAt           DateTime
  endedAt             DateTime
  visibleToMemberOnly Boolean         @default(false)
  name                String          @db.VarChar(100)
  description         String          @db.VarChar(200)
  rule                String          @db.VarChar(200)
  imageIcon           String          @db.VarChar(100)
  ratings             Int
  trendings           Int
  views               Int
  recommends          Int
  shareds             Int
  media               CampaignAsset[]
  details             Json

  lauchedByMember   Member  @relation(fields: [lauchedByMemberId], references: [id])
  lauchedByMemberId Int
  lauchedByEntity   Entity? @relation(fields: [lauchedByEntityId], references: [id])
  lauchedByEntityId Int?
}

// model Post {
//   id    Int           @id @default(autoincrement())
//   title String
//   tags  TagsOnPosts[]
// }

// model Tag {
//   id    Int           @id @default(autoincrement())
//   name  String        @unique
//   posts TagsOnPosts[]
// }

// model TagsOnPosts {
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    Int
//   tag       Tag      @relation(fields: [tagId], references: [id])
//   tagId     Int
//   createdAt DateTime @default(now())

//   @@id([postId, tagId])
// }
